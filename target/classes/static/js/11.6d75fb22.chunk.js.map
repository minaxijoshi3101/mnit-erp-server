{"version":3,"sources":["store/modules/application/app.action.js","components/common/GridAction.js","pages/masters/Branch.js"],"names":["showLoader","type","SHOW_LOADING","hideLoader","HIDE_LOADING","formData","SET_FORM_DATA","ActionIcons","React","memo","data","handlRowClick","props","className","view","overlay","id","icon","faEye","onClick","edit","faEdit","list","faList","delete","faTrash","lang","require","Branch","dispatch","useDispatch","useState","left","right","panelWidth","gridRef","setGridRef","enableEditing","setEnableEditing","formValues","setFormValues","departments","setDepartments","programs","setPrograms","degrees","setDegrees","useEffect","getDepartments","then","resp","messageType","response","catch","e","getPrograms","getDegrees","columns","name","header","minWidth","defaultFlex","maxWidth","render","active","sortable","useCallback","action","dataSource","filterValue","Promise","resolve","reject","getBranches","count","numberOfElements","abbreviation","description","initialValues","initialDataValues","setInitialDataValues","onSubmit","values","a","resetForm","errors","alert","departmentId","programId","degreeId","HTTP","Request","undefined","process","result","current","reload","console","log","Notify","success","message","error","aria-label","to","home","aria-current","branch","md","span","Header","tableRecords","Body","onReady","idProperty","style","minHeight","branchMaster","dataLength","height","enableReinitialize","formik","htmlFor","as","department","value","map","item","program","degree","status","inactive","variant","save"],"mappings":"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","file":"static/js/11.6d75fb22.chunk.js","sourcesContent":["import { SHOW_LOADING, HIDE_LOADING, SET_FORM_DATA, SET_MODULE_DATA, TOGGLE_SUB_MODULE,  TOGGLE_SUB_MODULE_FORM, ACTIVE_SUB_MODULE } from './app.types';\n\n\nexport const showLoader = () => ({type: SHOW_LOADING });\nexport const hideLoader = () => ({type: HIDE_LOADING });\nexport const formData = (formData) => ({type: SET_FORM_DATA , formData});\nexport const moduleData = (moduleData) => ({type: SET_MODULE_DATA , moduleData});\nexport const toggleSubModule = (value) => ({type: TOGGLE_SUB_MODULE , value});\nexport const toggleSubModuleForm = (value) => ({type: TOGGLE_SUB_MODULE_FORM , value});\nexport const activeSubModule = (value) => ({type: ACTIVE_SUB_MODULE , value});\n","import React from 'react';\nimport { OverlayTrigger, Tooltip, Button } from 'react-bootstrap';\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { faEye, faTrash, faEdit, faList } from '@fortawesome/free-solid-svg-icons';\nimport PropTypes from 'prop-types';\n\nexport const ActionIcons = React.memo(({ data, handlRowClick, ...props }) => {\n    return (\n        <div className=\"grid-action-icon\">\n            {props.view && (\n                <OverlayTrigger\n                    overlay={ <Tooltip id=\"tooltip-view\">View</Tooltip> }\n                >\n                <FontAwesomeIcon icon={faEye} onClick={() => handlRowClick(data, \"view\")} />\n                </OverlayTrigger>)\n            }\n            {props.edit && (\n                <OverlayTrigger\n                    overlay={ <Tooltip id=\"tooltip-edit\">Edit</Tooltip> }\n                >\n               <FontAwesomeIcon icon={faEdit} onClick={() => handlRowClick(data, \"edit\")} />\n                </OverlayTrigger>)\n            }\n            {props.list && (\n                <OverlayTrigger\n                    overlay={ <Tooltip id=\"tooltip-list\">List</Tooltip> }\n                >\n                <FontAwesomeIcon icon={faList} onClick={() => handlRowClick(data, \"list\")} />\n                </OverlayTrigger>)\n            }\n            {props.delete && (\n                <OverlayTrigger\n                    overlay={ <Tooltip id=\"tooltip-delete\">Delete</Tooltip> }\n                >\n                <FontAwesomeIcon icon={faTrash} onClick={() => handlRowClick(data, \"delete\")} />\n                </OverlayTrigger>)\n            }            \n        </div>\n    )\n})\n\n\nexport const ActionButtons = React.memo(({ data, handlRowClick, ...props }) => {\n    console.log(\"Render action button\")\n    return (\n        <div className=\"grid-action-icon\">\n            {props.view && (\n                <Button variant=\"info\" size=\"sm\" onClick={() => handlRowClick(data, \"view\")}>\n                    View\n              </Button>)  \n            }\n            {props.edit && (\n                <Button variant=\"warning\" size=\"sm\" onClick={() => handlRowClick(data, \"edit\")}>\n                        Edit\n                </Button>)\n            }\n            {props.delete && (\n               <Button variant=\"danger\" size=\"sm\" onClick={() => handlRowClick(data, \"delete\")}>\n                        Delete\n                </Button>)\n            }\n        </div>\n    )\n})\nActionIcons.propTypes = {\n    data: PropTypes.object,\n    handlRowClick : PropTypes.func\n}\n\nActionButtons.propTypes = {\n    data: PropTypes.object,\n    handlRowClick : PropTypes.func\n}\n","\nimport { Link } from \"react-router-dom\";\nimport { useState, useCallback, useEffect } from 'react';\nimport {useDispatch} from 'react-redux';\nimport ReactDataGrid from '@inovua/reactdatagrid-community';\nimport {Row, Col, Card, Button} from 'react-bootstrap';\nimport {ActionIcons} from '../../components/common/GridAction';\nimport InfiniteScroll from 'react-infinite-scroll-component';\nimport { Formik, Form } from 'formik';\nimport { Field } from 'formik';\nimport {getBranches,getDepartments,getPrograms,getDegrees} from '../../api/account.api';\nimport {formData} from '../../store/modules/application/app.action';\nimport { showLoader, hideLoader } from '../../store/modules/application/app.action';\nimport HTTP from '../../service/http';\nimport Notify from '../../utils/notify';\n\nconst lang = require('../../language/en.json');\n\n\nconst Branch = () => {\n    const dispatch = useDispatch();\n    const [panelWidth] = useState({left: 8, right: 4});\n    const [gridRef, setGridRef] = useState(null);\n    const [enableEditing, setEnableEditing] = useState(false);\n    const [formValues, setFormValues] = useState({});\n    const [departments, setDepartments] = useState([]);\n    const [programs, setPrograms] = useState([]);\n    const [degrees, setDegrees] = useState([]);\n\n    useEffect(() => {\n        getDepartments().then(resp => { \n            if(resp.data.messageType==='SUCCESS'){\n                setDepartments(resp.data.response)\n            } else {\n                setDepartments([])\n            }           \n        }).catch(e => {      \n            setDepartments([])\n        })\n\n        getPrograms().then(resp => { \n            setPrograms(resp.data)         \n        }).catch(e => {      \n            setPrograms([])\n        })\n\n        getDegrees().then(resp => { \n            if(resp.data.messageType==='SUCCESS'){\n                setDegrees(resp.data.response)\n            } else {\n                setDegrees([])\n            }           \n        }).catch(e => {      \n            setDegrees([])\n        })\n    },[])\n\n\n    const columns = [\n        { name: 'id', header: 'S.No', minWidth: 50, defaultFlex: 1 },\n        { name: 'name', header: 'Name', maxWidth: 200, defaultFlex: 1 },    \n        { name: 'abbreviation', header: 'Abbreviation', maxWidth: 200, defaultFlex: 1 },\n        { name: 'active', header: 'Status', maxWidth: 200, defaultFlex: 1, render: (({data})=>data.active?'Active':'Inactive') },\n        { name: '', header: 'Action', defaultFlex: 1, sortable: false, render: (({ data }) => <ActionIcons data={data} handlRowClick={handlRowClick} edit/>) }\n    ]\n\n    const gridStyle = { minHeight: 400 }\n    \n    const loadData = ({filterValue }) => new Promise((resolve, reject) => {         \n        getBranches().then(resp => {  \n            return resolve({count: resp.data.response.numberOfElements, data: resp.data.response})\n        }).catch(e => {      \n            return resolve({count: 0, data: []})\n        })\n    })\n    \n    const handlRowClick = useCallback((data, action) => {   \n        dispatch(formData(data));\n        \n        if(action===\"edit\"){ \n            setEnableEditing(true)\n            setFormValues(data)\n          }\n    },[]);\n      const dataSource = useCallback(loadData, []);\n    \n    const onCreateSuccess =(data)=> {      \n        gridRef.current.reload()    \n        console.log(\"Recored added, append to list\", data);\n    }\n\n    const [initialValues] = useState({ name: '', abbreviation: '',description: '', active:'' })\n    const [initialDataValues, setInitialDataValues] = useState({})\n    \n    useEffect(() => {\n        if(enableEditing){            \n          setInitialDataValues(formValues)\n        }\n    },[enableEditing, formValues])\n\n    const onSubmit = async (values, {resetForm}) => {\n        \n        const errors = {};\n        if (!values.name) {\n            errors.name = alert(\"Name is required\");\n            return false;\n        } \n        if (!values.abbreviation) {\n            errors.abbreviation = alert(\"Abbreviation is required\");\n            return false;\n        }\n        if (!values.active) {\n            errors.active = alert(\"Status is required\");\n            return false;\n        }\n        if (!values.departmentId) {\n            errors.departmentId = alert(\"Department is required\");\n            return false;\n        } \n        if (!values.programId) {\n            errors.programId = alert(\"Program is required\");\n            return false;\n        } \n        if (!values.degreeId) {\n            errors.degreeId = alert(\"Degree is required\");\n            return false;\n        }\n        \n        try {\n            dispatch(showLoader());\n            const result = await HTTP.Request((values.id===undefined) ? \"POST\" : \"PUT\", process.env.REACT_APP_API_URL+\"branch\", values);\n            onCreateSuccess(result);\n            dispatch(hideLoader());\n            Notify.success(result.data.message);\n            resetForm(initialValues);\n        } catch (err) {      \n            dispatch(hideLoader());\n            let message = (err.message===undefined) ? err: err.message;\n            Notify.error(message);\n        }        \n    }\n\n    return (\n        <>\n            <div className=\"container\">\n                <nav aria-label=\"breadcrumb\">\n                    <ol className=\"breadcrumb\">\n                        <li className=\"theme-font-size breadcrumb-item\"><Link className=\"theme-color\" to=\"/dashboard\">{lang.home}</Link></li>\n                        <li className=\"theme-font-size breadcrumb-item active\" aria-current=\"page\">{lang.branch}</li>\n                    </ol>\n                </nav>\n            </div>\n            <Row>\n            <Col md={{span: panelWidth.left}}>\n                <Card>\n                <Card.Header>\n                    {lang.tableRecords}\n                </Card.Header>\n                <Card.Body> \n                    <ReactDataGrid\n                    onReady={setGridRef}\n                    idProperty=\"id\"\n                    style={gridStyle}\n                    columns={columns}\n                    //pagination\n                    dataSource={dataSource}\n                   // defaultLimit={10}\n                    />\n                </Card.Body>\n                </Card>\n            </Col>\n            <Col md={{span: panelWidth.right}}>\n                <Card>\n                <Card.Header>\n                {lang.branchMaster}\n                </Card.Header>\n                <Card.Body>\n                <div>\n                    <InfiniteScroll\n                    dataLength={60}\n                    height={400}\n                    >\n                    <Formik\n                    initialValues={enableEditing ? initialDataValues : initialValues}\n                    enableReinitialize={true}\n                    onSubmit={onSubmit}>\n                        {formik => (\n                        <Form>\n                            <div className='form-group'>\n                                <label className=\"theme-font-size\" htmlFor=\"name\">{lang.name}</label> \n                                <Field id=\"name\" className='form-control' name=\"name\"/>\n                            </div>\n                            <div className='form-group'>\n                                <label className=\"theme-font-size\" htmlFor=\"abbreviation\">{lang.abbreviation}</label> \n                                <Field id=\"abbreviation\" className='form-control' name=\"abbreviation\"/>\n                            </div>\n                            <div className='form-group'>\n                                <label className=\"theme-font-size\" htmlFor=\"description\">{lang.description}</label> \n                                <Field as=\"textarea\" id=\"description\" className='form-control' name=\"description\"/>\n                            </div>\n                            <div className='form-group'>\n                                <label className=\"theme-font-size\" htmlFor=\"departmentId\">{lang.department}</label> \n                                <Field as=\"select\" id=\"departmentId\" className='form-control' name=\"departmentId\">\n                                <option value=\"\">---</option>\n                                {departments?.map((item) => {\n                                    return <option value={item.id}>{item.name}</option>\n                                })}\n                                </Field>\n                            </div>\n                            <div className='form-group'>\n                                <label className=\"theme-font-size\" htmlFor=\"programId\">{lang.program}</label> \n                                <Field as=\"select\" id=\"programId\" className='form-control' name=\"programId\">\n                                <option value=\"\">---</option>\n                                {programs?.map((item) => {\n                                    return <option value={item.id}>{item.name}</option>\n                                })}\n                                </Field>\n                            </div>\n                            <div className='form-group'>\n                                <label className=\"theme-font-size\" htmlFor=\"degreeId\">{lang.degree}</label> \n                                <Field as=\"select\" id=\"degreeId\" className='form-control' name=\"degreeId\">\n                                <option value=\"\">---</option>\n                                {degrees?.map((item) => {\n                                    return <option value={item.id}>{item.name}</option>\n                                })}\n                                </Field>\n                            </div>\n                            <div className='form-group'>\n                                <label className=\"theme-font-size\" htmlFor=\"active\">{lang.status}</label> \n                                <Field as=\"select\" id=\"active\" className='form-control' name=\"active\">\n                                <option value=\"\">---</option>\n                                    <option value=\"true\">{lang.active}</option>\n                                    <option value=\"false\">{lang.inactive}</option>\n                                </Field>\n                            </div>\n                            <Button className=\"theme-back-color\" variant=\"primary\" type=\"submit\">{lang.save}</Button>\n                        </Form>\n                        )}\n                    </Formik>\n                    </InfiniteScroll> \n                </div>\n                </Card.Body>\n                </Card> \n            </Col> \n            </Row>\n        </>\n    )\n}\nexport default Branch;"],"sourceRoot":""}