{"version":3,"sources":["store/modules/application/app.action.js","components/common/GridAction.js","pages/masters/State.js"],"names":["showLoader","type","SHOW_LOADING","hideLoader","HIDE_LOADING","formData","SET_FORM_DATA","ActionIcons","React","memo","data","handlRowClick","props","className","view","overlay","id","icon","faEye","onClick","edit","faEdit","list","faList","delete","faTrash","lang","require","State","dispatch","useDispatch","useState","countries","setCounties","useEffect","getCountries","then","resp","response","catch","e","console","log","left","right","panelWidth","gridRef","setGridRef","enableEditing","setEnableEditing","formValues","setFormValues","columns","name","header","minWidth","defaultFlex","maxWidth","sortable","render","useCallback","action","dataSource","skip","limit","sortInfo","groupBy","filterValue","Promise","resolve","reject","value","getStates","count","numberOfElements","countryId","initialValues","initialDataValues","setInitialDataValues","onSubmit","values","a","resetForm","errors","alert","HTTP","Request","undefined","process","result","current","reload","Notify","success","message","error","aria-label","to","home","aria-current","state","md","span","Header","tableRecords","Body","onReady","idProperty","style","minHeight","stateForm","dataLength","height","enableReinitialize","formik","htmlFor","statename","placeholder","country","as","map","item","active","true","false","variant","save"],"mappings":"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","file":"static/js/21.83b6947d.chunk.js","sourcesContent":["import { SHOW_LOADING, HIDE_LOADING, SET_FORM_DATA, SET_MODULE_DATA, TOGGLE_SUB_MODULE,  TOGGLE_SUB_MODULE_FORM, ACTIVE_SUB_MODULE } from './app.types';\n\n\nexport const showLoader = () => ({type: SHOW_LOADING });\nexport const hideLoader = () => ({type: HIDE_LOADING });\nexport const formData = (formData) => ({type: SET_FORM_DATA , formData});\nexport const moduleData = (moduleData) => ({type: SET_MODULE_DATA , moduleData});\nexport const toggleSubModule = (value) => ({type: TOGGLE_SUB_MODULE , value});\nexport const toggleSubModuleForm = (value) => ({type: TOGGLE_SUB_MODULE_FORM , value});\nexport const activeSubModule = (value) => ({type: ACTIVE_SUB_MODULE , value});\n","import React from 'react';\nimport { OverlayTrigger, Tooltip, Button } from 'react-bootstrap';\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { faEye, faTrash, faEdit, faList } from '@fortawesome/free-solid-svg-icons';\nimport PropTypes from 'prop-types';\n\nexport const ActionIcons = React.memo(({ data, handlRowClick, ...props }) => {\n    return (\n        <div className=\"grid-action-icon\">\n            {props.view && (\n                <OverlayTrigger\n                    overlay={ <Tooltip id=\"tooltip-view\">View</Tooltip> }\n                >\n                <FontAwesomeIcon icon={faEye} onClick={() => handlRowClick(data, \"view\")} />\n                </OverlayTrigger>)\n            }\n            {props.edit && (\n                <OverlayTrigger\n                    overlay={ <Tooltip id=\"tooltip-edit\">Edit</Tooltip> }\n                >\n               <FontAwesomeIcon icon={faEdit} onClick={() => handlRowClick(data, \"edit\")} />\n                </OverlayTrigger>)\n            }\n            {props.list && (\n                <OverlayTrigger\n                    overlay={ <Tooltip id=\"tooltip-list\">List</Tooltip> }\n                >\n                <FontAwesomeIcon icon={faList} onClick={() => handlRowClick(data, \"list\")} />\n                </OverlayTrigger>)\n            }\n            {props.delete && (\n                <OverlayTrigger\n                    overlay={ <Tooltip id=\"tooltip-delete\">Delete</Tooltip> }\n                >\n                <FontAwesomeIcon icon={faTrash} onClick={() => handlRowClick(data, \"delete\")} />\n                </OverlayTrigger>)\n            }            \n        </div>\n    )\n})\n\n\nexport const ActionButtons = React.memo(({ data, handlRowClick, ...props }) => {\n    console.log(\"Render action button\")\n    return (\n        <div className=\"grid-action-icon\">\n            {props.view && (\n                <Button variant=\"info\" size=\"sm\" onClick={() => handlRowClick(data, \"view\")}>\n                    View\n              </Button>)  \n            }\n            {props.edit && (\n                <Button variant=\"warning\" size=\"sm\" onClick={() => handlRowClick(data, \"edit\")}>\n                        Edit\n                </Button>)\n            }\n            {props.delete && (\n               <Button variant=\"danger\" size=\"sm\" onClick={() => handlRowClick(data, \"delete\")}>\n                        Delete\n                </Button>)\n            }\n        </div>\n    )\n})\nActionIcons.propTypes = {\n    data: PropTypes.object,\n    handlRowClick : PropTypes.func\n}\n\nActionButtons.propTypes = {\n    data: PropTypes.object,\n    handlRowClick : PropTypes.func\n}\n","\n\nimport { Link } from \"react-router-dom\";\nimport { useState, useCallback, useEffect } from 'react';\nimport {useDispatch} from 'react-redux';\nimport ReactDataGrid from '@inovua/reactdatagrid-community';\nimport {Row, Col, Card, Button, InputGroup, FormControl} from 'react-bootstrap';\nimport {ActionIcons} from '../../components/common/GridAction';\nimport {useHistory} from 'react-router-dom';\nimport InfiniteScroll from 'react-infinite-scroll-component';\nimport { Formik, Form } from 'formik';\nimport { Field } from 'formik';\nimport {getStates, getCountries} from '../../api/account.api';\nimport {formData} from '../../store/modules/application/app.action';\nimport { showLoader, hideLoader } from '../../store/modules/application/app.action';\nimport HTTP from '../../service/http';\nimport Notify from '../../utils/notify';\nconst lang = require('../../language/en.json');\n\nconst State = () => {\n    const dispatch = useDispatch();\n    // const history = useHistory();\n    const [countries, setCounties] = useState([]);\n\n    useEffect(() => {\n        getCountries().then(resp => { \n            setCounties(resp.data.response)\n        }).catch(e => {      \n            setCounties([])\n        })\n\n    },[])\n\n    console.log(countries);\n    const [panelWidth] = useState({left: 8, right: 4});\n    const [gridRef, setGridRef] = useState(null);\n    const [enableEditing, setEnableEditing] = useState(false);\n    const [formValues, setFormValues] = useState({});\n\n    const columns = [\n        { name: 'id', header: 'S.No', minWidth: 50, defaultFlex: 1 },\n        { name: 'name', header: 'State Name', maxWidth: 200, defaultFlex: 1 },    \n        { name: 'countryId', header: 'Country Name', maxWidth: 200, defaultFlex: 1 },\n        { name: '', header: 'Action', defaultFlex: 1, sortable: false, render: (({ data }) => <ActionIcons data={data} handlRowClick={handlRowClick} edit />) }\n    ]\n\n    const gridStyle = { minHeight: 400 }\n    \n    const loadData = ({ skip, limit, sortInfo, groupBy, filterValue }) => new Promise((resolve, reject) => {    \n   \n        let searchText = filterValue!==null?filterValue[0].value:\"\";\n        getStates().then(resp => {   \n            console.log(resp);  \n          return resolve({count: resp.data.response.numberOfElements, data: resp.data.response})\n        }).catch(e => {      \n          return resolve({count: 0, data: []})\n        })\n      })\n    \n    const handlRowClick = useCallback((data, action) => {   \n        dispatch(formData(data));\n        \n        if(action===\"edit\"){ \n            setEnableEditing(true)\n            setFormValues(data)\n          }\n    },[]);\n    const dataSource = useCallback(loadData, []);\n    \n    const onCreateSuccess =(data)=> {      \n        gridRef.current.reload()    \n        console.log(\"Recored added, append to list\", data);\n    }\n\n    const [initialValues] = useState({ name: '', countryId: '' })\n    const [initialDataValues, setInitialDataValues] = useState({})\n    \n    useEffect(() => {\n        if(enableEditing){            \n          setInitialDataValues(formValues)\n        }\n    },[enableEditing, formValues])\n\n    const onSubmit = async (values, {resetForm}) => {\n        \n        const errors = {};\n        if (!values.name) {\n            errors.name = alert(\"State Name is required\");\n            return false;\n        } \n        if (!values.countryId) {\n            errors.countryId = alert(\"Country Name is required\");\n            return false;\n        } \n        try {\n            dispatch(showLoader());\n            const result = await HTTP.Request((values.id===undefined) ? \"POST\" : \"PUT\", process.env.REACT_APP_API_URL+\"/state\", values);\n            onCreateSuccess(result);\n            dispatch(hideLoader());\n            Notify.success(result.data.message);\n            resetForm({initialValues});\n        } catch (err) {      \n            dispatch(hideLoader());\n            let message = (err.message===undefined) ? err: err.message;\n            Notify.error(message);\n        }   \n    }\n\n    return (\n        <>\n            <div className=\"container\">\n                <nav aria-label=\"breadcrumb\">\n                    <ol className=\"breadcrumb\">\n                        <li className=\"theme-font-size breadcrumb-item\"><Link className=\"theme-color\" to=\"/dashboard\">{lang.home}</Link></li>\n                        <li className=\"theme-font-size breadcrumb-item active\" aria-current=\"page\">{lang.state}</li>\n                    </ol>\n                </nav>\n            </div>\n            <Row>\n            <Col md={{span: panelWidth.left}}>\n                <Card>\n                <Card.Header>\n                {lang.tableRecords}\n                </Card.Header>\n                <Card.Body> \n                    <ReactDataGrid\n                    onReady={setGridRef}\n                    idProperty=\"id\"\n                    style={gridStyle}\n                    columns={columns}\n                    //pagination\n                    dataSource={dataSource}\n                    //defaultLimit={10}\n                    />\n                </Card.Body>\n                </Card>\n            </Col>\n            <Col md={{span: panelWidth.right}}>\n                <Card>\n                <Card.Header>\n                {lang.stateForm} \n                </Card.Header>\n                <Card.Body>\n                <div>\n                    <InfiniteScroll\n                    dataLength={60}\n                    height={400}\n                    >\n                    <Formik\n                    initialValues={enableEditing ? initialDataValues : initialValues}\n                    enableReinitialize={true}\n                    onSubmit={onSubmit}>\n                        {formik => (\n                        <Form>\n                            <div className='form-group'>\n                                <label className=\"theme-font-size\" htmlFor=\"name\">{lang.statename}</label> \n                                <Field id=\"name\" className='form-control' name=\"name\" placeholder=\"State Name\" />\n                            </div>\n                            <div className='form-group'>\n                                <label className=\"theme-font-size\" htmlFor=\"countryId\">{lang.country}</label> \n                                <Field as=\"select\" name=\"countryId\" id='countryId' className='form-control'>\n                                    <option value=\"\">---</option>\n                                    { \n                                        countries?.map((item) => {\n                                            return  <option value={item.id}>{item.name}</option>\n                                        })\n                                    }\n                                    \n                                </Field>\n                            </div>\n                            <div className='form-group'>\n                                <label className=\"theme-font-size\" htmlFor=\"active\">{lang.active}</label> \n                                <Field as=\"select\" name=\"active\" id='active' className='form-control'>\n                                    <option value=\"\">---</option>\n                                    <option value=\"true\">{lang.true}</option>\n                                    <option value=\"false\">{lang.false}</option>\n                                </Field>\n                            </div>\n                            <Button className=\"theme-back-color\" variant=\"primary\" type=\"submit\">{lang.save}</Button>\n                        </Form>\n                        )}\n                    </Formik>\n                    </InfiniteScroll> \n                </div>\n                </Card.Body>\n                </Card> \n            </Col> \n            </Row>\n        </>\n    )\n}\nexport default State;"],"sourceRoot":""}