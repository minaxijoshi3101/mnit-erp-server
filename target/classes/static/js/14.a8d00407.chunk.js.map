{"version":3,"sources":["store/modules/application/app.action.js","components/common/GridAction.js","pages/masters/Degree.js"],"names":["showLoader","type","SHOW_LOADING","hideLoader","HIDE_LOADING","formData","SET_FORM_DATA","ActionIcons","React","memo","data","handlRowClick","props","className","view","overlay","id","icon","faEye","onClick","edit","faEdit","list","faList","delete","faTrash","lang","require","Degree","dispatch","useDispatch","useState","left","right","panelWidth","gridRef","setGridRef","enableEditing","setEnableEditing","formValues","setFormValues","columns","name","header","minWidth","defaultFlex","maxWidth","sortable","render","useCallback","action","dataSource","skip","limit","sortInfo","groupBy","filterValue","Promise","resolve","reject","value","getDegrees","then","resp","count","response","numberOfElements","catch","e","abbreviation","initialValues","initialDataValues","setInitialDataValues","useEffect","onSubmit","values","a","resetForm","errors","alert","HTTP","Request","undefined","process","result","current","reload","console","log","Notify","success","message","error","aria-label","to","home","aria-current","degree","md","span","Header","tableRecords","Body","onReady","idProperty","style","minHeight","degreeForm","dataLength","height","enableReinitialize","formik","htmlFor","degreename","placeholder","degreecode","variant","save"],"mappings":"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","file":"static/js/14.a8d00407.chunk.js","sourcesContent":["import { SHOW_LOADING, HIDE_LOADING, SET_FORM_DATA, SET_MODULE_DATA, TOGGLE_SUB_MODULE,  TOGGLE_SUB_MODULE_FORM, ACTIVE_SUB_MODULE } from './app.types';\n\n\nexport const showLoader = () => ({type: SHOW_LOADING });\nexport const hideLoader = () => ({type: HIDE_LOADING });\nexport const formData = (formData) => ({type: SET_FORM_DATA , formData});\nexport const moduleData = (moduleData) => ({type: SET_MODULE_DATA , moduleData});\nexport const toggleSubModule = (value) => ({type: TOGGLE_SUB_MODULE , value});\nexport const toggleSubModuleForm = (value) => ({type: TOGGLE_SUB_MODULE_FORM , value});\nexport const activeSubModule = (value) => ({type: ACTIVE_SUB_MODULE , value});\n","import React from 'react';\nimport { OverlayTrigger, Tooltip, Button } from 'react-bootstrap';\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { faEye, faTrash, faEdit, faList } from '@fortawesome/free-solid-svg-icons';\nimport PropTypes from 'prop-types';\n\nexport const ActionIcons = React.memo(({ data, handlRowClick, ...props }) => {\n    return (\n        <div className=\"grid-action-icon\">\n            {props.view && (\n                <OverlayTrigger\n                    overlay={ <Tooltip id=\"tooltip-view\">View</Tooltip> }\n                >\n                <FontAwesomeIcon icon={faEye} onClick={() => handlRowClick(data, \"view\")} />\n                </OverlayTrigger>)\n            }\n            {props.edit && (\n                <OverlayTrigger\n                    overlay={ <Tooltip id=\"tooltip-edit\">Edit</Tooltip> }\n                >\n               <FontAwesomeIcon icon={faEdit} onClick={() => handlRowClick(data, \"edit\")} />\n                </OverlayTrigger>)\n            }\n            {props.list && (\n                <OverlayTrigger\n                    overlay={ <Tooltip id=\"tooltip-list\">List</Tooltip> }\n                >\n                <FontAwesomeIcon icon={faList} onClick={() => handlRowClick(data, \"list\")} />\n                </OverlayTrigger>)\n            }\n            {props.delete && (\n                <OverlayTrigger\n                    overlay={ <Tooltip id=\"tooltip-delete\">Delete</Tooltip> }\n                >\n                <FontAwesomeIcon icon={faTrash} onClick={() => handlRowClick(data, \"delete\")} />\n                </OverlayTrigger>)\n            }            \n        </div>\n    )\n})\n\n\nexport const ActionButtons = React.memo(({ data, handlRowClick, ...props }) => {\n    console.log(\"Render action button\")\n    return (\n        <div className=\"grid-action-icon\">\n            {props.view && (\n                <Button variant=\"info\" size=\"sm\" onClick={() => handlRowClick(data, \"view\")}>\n                    View\n              </Button>)  \n            }\n            {props.edit && (\n                <Button variant=\"warning\" size=\"sm\" onClick={() => handlRowClick(data, \"edit\")}>\n                        Edit\n                </Button>)\n            }\n            {props.delete && (\n               <Button variant=\"danger\" size=\"sm\" onClick={() => handlRowClick(data, \"delete\")}>\n                        Delete\n                </Button>)\n            }\n        </div>\n    )\n})\nActionIcons.propTypes = {\n    data: PropTypes.object,\n    handlRowClick : PropTypes.func\n}\n\nActionButtons.propTypes = {\n    data: PropTypes.object,\n    handlRowClick : PropTypes.func\n}\n","\n\nimport { Link } from \"react-router-dom\";\nimport { useState, useCallback, useEffect } from 'react';\nimport {useDispatch} from 'react-redux';\nimport ReactDataGrid from '@inovua/reactdatagrid-community';\nimport {Row, Col, Card, Button} from 'react-bootstrap';\nimport {ActionIcons} from '../../components/common/GridAction';\nimport InfiniteScroll from 'react-infinite-scroll-component';\nimport { Formik, Form } from 'formik';\nimport { Field } from 'formik';\nimport {getDegrees} from '../../api/account.api';\nimport {formData} from '../../store/modules/application/app.action';\nimport { showLoader, hideLoader } from '../../store/modules/application/app.action';\nimport HTTP from '../../service/http';\nimport Notify from '../../utils/notify';\nconst lang = require('../../language/en.json');\n \n\nconst Degree = () => {\n    const dispatch = useDispatch();\n\n    const [panelWidth] = useState({left: 8, right: 4});\n    const [gridRef, setGridRef] = useState(null);\n    const [enableEditing, setEnableEditing] = useState(false);\n    const [formValues, setFormValues] = useState({});\n\n    const columns = [\n        { name: 'id', header: 'S.No', minWidth: 50, defaultFlex: 1 },\n        { name: 'name', header: 'Degree Name', maxWidth: 200, defaultFlex: 1 },    \n        { name: 'abbreviation', header: 'Degree Code', maxWidth: 200, defaultFlex: 1 },\n        { name: '', header: 'Action', defaultFlex: 1, sortable: false, render: (({ data }) => <ActionIcons data={data} handlRowClick={handlRowClick} edit />) }\n    ]\n\n    const gridStyle = { minHeight: 400 }\n    \n    const loadData = ({ skip, limit, sortInfo, groupBy, filterValue }) => new Promise((resolve, reject) => {    \n   \n        let searchText = filterValue!==null?filterValue[0].value:\"\";\n        getDegrees().then(resp => {     \n          return resolve({count: resp.data.response.numberOfElements, data: resp.data.response})\n        }).catch(e => {      \n          return resolve({count: 0, data: []})\n        })\n      })\n    \n    const handlRowClick = useCallback((data, action) => {   \n        dispatch(formData(data));\n        \n        if(action===\"edit\"){ \n            setEnableEditing(true)\n            setFormValues(data)\n          }\n    },[]);\n    const dataSource = useCallback(loadData, []);\n    \n    const onCreateSuccess =(data)=> {      \n        gridRef.current.reload()    \n        console.log(\"Recored added, append to list\", data);\n    }\n\n    const [initialValues] = useState({ name: '', abbreviation: '' })\n    const [initialDataValues, setInitialDataValues] = useState({})\n    \n    useEffect(() => {\n        if(enableEditing){            \n          setInitialDataValues(formValues)\n        }\n    },[enableEditing, formValues])\n\n    const onSubmit = async (values, {resetForm}) => {\n        \n        const errors = {};\n        if (!values.name) {\n            errors.name = alert(\"Degree Name is required\");\n            return false;\n        } \n        if (!values.abbreviation) {\n            errors.abbreviation = alert(\"Degree Code is required\");\n            return false;\n        } \n        try {\n            dispatch(showLoader());\n            const result = await HTTP.Request((values.id===undefined) ? \"POST\" : \"PUT\", process.env.REACT_APP_API_URL+\"degree\", values);\n            onCreateSuccess(result);\n            dispatch(hideLoader());\n            Notify.success(result.data.message);\n            resetForm({initialValues});\n        } catch (err) {      \n            dispatch(hideLoader());\n            let message = (err.message===undefined) ? err: err.message;\n            Notify.error(message);\n        }   \n    }\n\n    return (\n        <>\n            <div className=\"container\">\n                <nav aria-label=\"breadcrumb\">\n                    <ol className=\"breadcrumb\">\n                        <li className=\"theme-font-size breadcrumb-item\"><Link className=\"theme-color\" to=\"/dashboard\">{lang.home}</Link></li>\n                        <li className=\"theme-font-size breadcrumb-item active\" aria-current=\"page\">{lang.degree}</li>\n                    </ol>\n                </nav>\n            </div>\n            <Row>\n            <Col md={{span: panelWidth.left}}>\n                <Card>\n                <Card.Header>\n                {lang.tableRecords} \n                </Card.Header>\n                <Card.Body> \n                    <ReactDataGrid\n                    onReady={setGridRef}\n                    idProperty=\"id\"\n                    style={gridStyle}\n                    columns={columns}\n                    //pagination\n                    dataSource={dataSource}\n                    //defaultLimit={10}\n                    />\n                </Card.Body>\n                </Card>\n            </Col>\n            <Col md={{span: panelWidth.right}}>\n                <Card>\n                <Card.Header>\n                {lang.degreeForm} \n                </Card.Header>\n                <Card.Body>\n                <div>\n                    <InfiniteScroll\n                    dataLength={60}\n                    height={400}\n                    >\n                    <Formik\n                    initialValues={enableEditing ? initialDataValues : initialValues}\n                    enableReinitialize={true}\n                    onSubmit={onSubmit}>\n                        {formik => (\n                        <Form>\n                            <div className='form-group'>\n                                <label className=\"theme-font-size\" htmlFor=\"name\">{lang.degreename}</label> \n                                <Field id=\"name\" className='form-control' name=\"name\" placeholder=\"Degree Name\" />\n                            </div>\n                            <div className='form-group'>\n                                <label className=\"theme-font-size\" htmlFor=\"abbreviation\">{lang.degreecode}</label> \n                                <Field id=\"abbreviation\" className='form-control' name=\"abbreviation\" placeholder=\"Degree Code\" />\n                            </div>\n                            <Button className=\"theme-back-color\" variant=\"primary\" type=\"submit\">{lang.save}</Button>\n                        </Form>\n                        )}\n                    </Formik>\n                    </InfiniteScroll> \n                </div>\n                </Card.Body>\n                </Card> \n            </Col> \n            </Row>\n        </>\n    )\n}\nexport default Degree;"],"sourceRoot":""}