{"version":3,"sources":["store/modules/application/app.action.js","components/common/GridAction.js","pages/masters/Menus.js"],"names":["showLoader","type","SHOW_LOADING","hideLoader","HIDE_LOADING","formData","SET_FORM_DATA","ActionIcons","React","memo","data","handlRowClick","props","className","view","overlay","id","icon","faEye","onClick","edit","faEdit","list","faList","delete","faTrash","lang","require","Menus","dispatch","useDispatch","useState","modules","setModules","menus","setMenus","allMenus","setAllMenus","selectedModule","setSelectedModule","selectedModuleforMenu","setSelectedModuleforMenu","useEffect","getModules","then","resp","response","catch","e","left","right","panelWidth","gridRef","setGridRef","enableEditing","setEnableEditing","formValues","setFormValues","columns","name","header","minWidth","defaultFlex","maxWidth","sortable","render","onChangeModule","target","value","a","fetch","process","json","body","getModulesAllMenus","useCallback","action","console","log","moduleId","setInitialDataValues","handlModuleSelect","map","label","title","alert","parentId","description","initialValues","initialDataValues","onSubmit","values","resetForm","errors","HTTP","Request","undefined","result","current","reload","Notify","success","message","error","aria-label","to","home","aria-current","formik","htmlFor","module","as","onChange","selectmodule","index","md","span","Header","tableRecords","Body","onReady","idProperty","style","minHeight","dataSource","menusForm","dataLength","height","enableReinitialize","placeholder","parent","item","Description","variant","save"],"mappings":"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","file":"static/js/17.7829d73a.chunk.js","sourcesContent":["import { SHOW_LOADING, HIDE_LOADING, SET_FORM_DATA, SET_MODULE_DATA, TOGGLE_SUB_MODULE,  TOGGLE_SUB_MODULE_FORM, ACTIVE_SUB_MODULE } from './app.types';\n\n\nexport const showLoader = () => ({type: SHOW_LOADING });\nexport const hideLoader = () => ({type: HIDE_LOADING });\nexport const formData = (formData) => ({type: SET_FORM_DATA , formData});\nexport const moduleData = (moduleData) => ({type: SET_MODULE_DATA , moduleData});\nexport const toggleSubModule = (value) => ({type: TOGGLE_SUB_MODULE , value});\nexport const toggleSubModuleForm = (value) => ({type: TOGGLE_SUB_MODULE_FORM , value});\nexport const activeSubModule = (value) => ({type: ACTIVE_SUB_MODULE , value});\n","import React from 'react';\nimport { OverlayTrigger, Tooltip, Button } from 'react-bootstrap';\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { faEye, faTrash, faEdit, faList } from '@fortawesome/free-solid-svg-icons';\nimport PropTypes from 'prop-types';\n\nexport const ActionIcons = React.memo(({ data, handlRowClick, ...props }) => {\n    return (\n        <div className=\"grid-action-icon\">\n            {props.view && (\n                <OverlayTrigger\n                    overlay={ <Tooltip id=\"tooltip-view\">View</Tooltip> }\n                >\n                <FontAwesomeIcon icon={faEye} onClick={() => handlRowClick(data, \"view\")} />\n                </OverlayTrigger>)\n            }\n            {props.edit && (\n                <OverlayTrigger\n                    overlay={ <Tooltip id=\"tooltip-edit\">Edit</Tooltip> }\n                >\n               <FontAwesomeIcon icon={faEdit} onClick={() => handlRowClick(data, \"edit\")} />\n                </OverlayTrigger>)\n            }\n            {props.list && (\n                <OverlayTrigger\n                    overlay={ <Tooltip id=\"tooltip-list\">List</Tooltip> }\n                >\n                <FontAwesomeIcon icon={faList} onClick={() => handlRowClick(data, \"list\")} />\n                </OverlayTrigger>)\n            }\n            {props.delete && (\n                <OverlayTrigger\n                    overlay={ <Tooltip id=\"tooltip-delete\">Delete</Tooltip> }\n                >\n                <FontAwesomeIcon icon={faTrash} onClick={() => handlRowClick(data, \"delete\")} />\n                </OverlayTrigger>)\n            }            \n        </div>\n    )\n})\n\n\nexport const ActionButtons = React.memo(({ data, handlRowClick, ...props }) => {\n    console.log(\"Render action button\")\n    return (\n        <div className=\"grid-action-icon\">\n            {props.view && (\n                <Button variant=\"info\" size=\"sm\" onClick={() => handlRowClick(data, \"view\")}>\n                    View\n              </Button>)  \n            }\n            {props.edit && (\n                <Button variant=\"warning\" size=\"sm\" onClick={() => handlRowClick(data, \"edit\")}>\n                        Edit\n                </Button>)\n            }\n            {props.delete && (\n               <Button variant=\"danger\" size=\"sm\" onClick={() => handlRowClick(data, \"delete\")}>\n                        Delete\n                </Button>)\n            }\n        </div>\n    )\n})\nActionIcons.propTypes = {\n    data: PropTypes.object,\n    handlRowClick : PropTypes.func\n}\n\nActionButtons.propTypes = {\n    data: PropTypes.object,\n    handlRowClick : PropTypes.func\n}\n","\n\nimport { Link } from \"react-router-dom\";\nimport React, { useState, useCallback, useEffect } from 'react';\nimport {useDispatch} from 'react-redux';\nimport ReactDataGrid from '@inovua/reactdatagrid-community';\nimport {Row, Col, Card, Button} from 'react-bootstrap';\nimport {ActionIcons} from '../../components/common/GridAction';\nimport InfiniteScroll from 'react-infinite-scroll-component';\nimport { Formik, Form } from 'formik';\nimport { Field } from 'formik';\nimport {getModules} from '../../api/account.api';\nimport {formData} from '../../store/modules/application/app.action';\nimport { showLoader, hideLoader } from '../../store/modules/application/app.action';\nimport HTTP from '../../service/http';\nimport Notify from '../../utils/notify';\nconst lang = require('../../language/en.json');\n \n\nconst Menus = () => {\n    const dispatch = useDispatch();\n    const [modules, setModules] = useState([]);\n    const [menus, setMenus] = useState([]);\n    const [allMenus, setAllMenus] = useState([]);\n    const [selectedModule, setSelectedModule] = useState(null);\n    const [selectedModuleforMenu, setSelectedModuleforMenu] = useState(null);\n\n    useEffect(() => {\n        getModules().then(resp => { \n            setModules(resp.data.response)\n        }).catch(e => {      \n            setModules([])\n        })\n\n    },[])\n\n    const [panelWidth] = useState({left: 8, right: 4});\n    const [gridRef, setGridRef] = useState(null);\n    const [enableEditing, setEnableEditing] = useState(false);\n    const [formValues, setFormValues] = useState({});\n\n    const columns = [\n        { name: 'id', header: 'S.No', minWidth: 50, defaultFlex: 1 },\n        { name: 'title', header: 'Title', maxWidth: 200, defaultFlex: 1 },    \n        { name: 'description', header: 'Description', maxWidth: 200, defaultFlex: 1 },\n        { name: 'moduleId', header: 'Module ID', maxWidth: 200, defaultFlex: 1 },\n        { name: 'parentId', header: 'Parent ID', maxWidth: 200, defaultFlex: 1 },\n        { name: '', header: 'Action', defaultFlex: 1, sortable: false, render: (({ data }) => <ActionIcons data={data} handlRowClick={handlRowClick} edit />) }\n    ]\n\n    const gridStyle = { minHeight: 400 }\n    const loadData = ({ skip, limit, sortInfo, groupBy, filterValue }) => new Promise((resolve, reject) => {    \n        return resolve({count: 10, data: allMenus})\n    })\n    \n    const onChangeModule=(e) => {\n        setSelectedModuleforMenu(e.target.value);\n        const getModulesAllMenus = async() => {\n            const response = await fetch(\n                process.env.REACT_APP_API_URL+\"content/menuTreeOfModule/\"+e.target.value\n            );\n            const body = await response.json();\n            if(body.response){\n                setAllMenus(body.response);\n            } else {\n                setAllMenus({});\n            }\n        }\n        getModulesAllMenus();\n    }\n    \n    const handlRowClick = useCallback((data, action) => {   \n        dispatch(formData(data));\n        \n        if(action===\"edit\"){ \n            console.log(data);\n            setEnableEditing(true)\n            setFormValues(data)\n          }\n    },[]);\n\n    const onCreateSuccess =(data)=> {      \n        gridRef.current.reload()    \n        console.log(\"Recored added, append to list\", data);\n    }\n\n    useEffect(() => {\n        if(enableEditing){  \n            console.log(formValues);   \n            setSelectedModule(formValues.moduleId);\n            setInitialDataValues(formValues)\n            \n        }\n    },[enableEditing, formValues])\n\n    const handlModuleSelect=(e)=>{\n        if(e.target.value){\n            setSelectedModule(e.target.value);\n            async function getModulesAllMenus() {\n                const response = await fetch(\n                    \"http://dev-erp1.mnit.ac.in:8080/content/menuTreeOfModule/\"+e.target.value\n                );\n            \n                const body = await response.json();\n                if(body.response){\n                    setMenus(\n                        body.response.map(({ title, id }) => ({\n                            label: title,\n                            value: id\n                        }))\n                    );\n                }else{\n                    setMenus({});\n                }\n            }\n            getModulesAllMenus();\n        }else{\n            alert('please select module name');\n        }\n        \n    }\n\n    const [initialValues] = useState({ title: '', moduleId: '', parentId: '', description: ''})\n    const [initialDataValues, setInitialDataValues] = useState({})\n    \n    const onSubmit = async (values, {resetForm}) => {\n        values.moduleId=selectedModule;\n        \n        const errors = {};\n        if (!values.title) {\n            errors.title = alert(\"Title is required\");\n            return false;\n        } \n        if (!values.moduleId) {\n            errors.moduleId = alert(\"Module ID is required\");\n            return false;\n        } \n        try {\n            dispatch(showLoader());\n            const result = await HTTP.Request((values.id === undefined) ? \"POST\" : \"PUT\", \"http://dev-erp1.mnit.ac.in:8080/content/menu\", values);      \n            onCreateSuccess(result);\n            dispatch(hideLoader());\n            Notify.success(result.data.message);\n            resetForm({initialValues});\n            setEnableEditing(false);\n        } catch (err) {      \n            dispatch(hideLoader());\n            let message = (err.message===undefined) ? err: err.message;\n            Notify.error(message);\n        }   \n    }\n\n    \n    return (\n        <>\n            <div className=\"container\">\n                <nav aria-label=\"breadcrumb\">\n                    <ol className=\"breadcrumb\">\n                        <li className=\"theme-font-size breadcrumb-item\"><Link className=\"theme-color\" to=\"/dashboard\">{lang.home}</Link></li>\n                        <li className=\"theme-font-size breadcrumb-item active\" aria-current=\"page\">{lang.menus}</li>\n                    </ol>\n                </nav>\n            </div>\n            <Row>\n                <Col>\n                <Formik>\n                        {formik => (\n                        <Form>\n                           \n                            <div className='form-group'>\n                                <label className=\"theme-font-size\" htmlFor=\"moduleId\">{lang.module}</label> \n                                <Field as=\"select\" value={selectedModuleforMenu} onChange={onChangeModule}  name=\"moduleId\" id='moduleId' className='form-control'>\n                                    <option value=\"\">{lang.selectmodule}</option>\n                                    { \n                                        modules?.map((module, index) => {\n                                            return  <option key={index} value={module.id}>{module.name}</option>\n                                        })\n                                    }                                    \n                                </Field>\n                            </div>\n                        </Form>\n                        )}\n                    </Formik>\n                </Col>\n            </Row>\n            <Row>\n            <Col md={{span: panelWidth.left}}>\n                <Card>\n                <Card.Header>\n                {lang.tableRecords}\n                </Card.Header>\n                <Card.Body> \n                    <ReactDataGrid\n                    onReady={setGridRef}\n                    idProperty=\"id\"\n                    style={gridStyle}\n                    columns={columns}\n                    //pagination\n                    dataSource={allMenus}\n                    //defaultLimit={10}\n                    />\n                </Card.Body>\n                </Card>\n            </Col>\n            <Col md={{span: panelWidth.right}}>\n                <Card>\n                <Card.Header>\n                {lang.menusForm} \n                </Card.Header>\n                <Card.Body>\n                <div>\n                    <InfiniteScroll\n                    dataLength={60}\n                    height={400}\n                    >\n                    <Formik\n                    initialValues={enableEditing ? initialDataValues : initialValues}\n                    enableReinitialize={true}\n                    onSubmit={onSubmit}>\n                        {formik => (\n                        <Form id=\"menuForm\">\n                            <div className='form-group'>\n                                <label className=\"theme-font-size\" htmlFor=\"title\">{lang.title}</label> \n                                <Field id=\"title\" className='form-control' name=\"title\" placeholder=\"Title\" />\n                            </div>\n                            <div className='form-group'>\n                                <label htmlFor=\"moduleId\">{lang.module}</label> \n                                <Field as=\"select\" value={selectedModule} onChange={handlModuleSelect}  name=\"moduleId\" id='moduleId' className='form-control'>\n                                    <option value=\"\">---</option>\n                                    { \n                                        modules?.map((module, index) => {\n                                            return  <option key={index} value={module.id}>{module.name}</option>\n                                        })\n                                    }                                    \n                                </Field>\n                            </div>\n                            <div className='form-group'>\n                                <label className=\"theme-font-size\" htmlFor=\"parentId\">{lang.parent}</label> \n                                <Field as=\"select\" name=\"parentId\" id='parentId' className='form-control'>\n                                    <option value=\"\">---</option>\n                                    { \n                                        menus?.map((item, index) => {\n                                            return  <option key={index} value={item.value}>{item.label}</option>\n                                        })\n                                    }\n                                    \n                                </Field>\n                            </div>\n                            <div className='form-group'>\n                                <label className=\"theme-font-size\" htmlFor=\"description\">{lang.Description}</label> \n                                <Field id=\"description\" className='form-control' name=\"description\" placeholder=\"Description\" />\n                           \n                            </div>\n                            <Button className=\"theme-back-color\" variant=\"primary\" type=\"submit\">{lang.save}</Button>\n                        </Form>\n                        )}\n                    </Formik>\n                    </InfiniteScroll> \n                </div>\n                </Card.Body>\n                </Card> \n            </Col> \n            </Row>\n        </>\n    )\n}\nexport default Menus;"],"sourceRoot":""}